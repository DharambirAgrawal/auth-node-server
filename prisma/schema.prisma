generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  name                 String
  email                String        @unique
  password             String
  accountStatus        AccountStatus @default(pending)
  isEmailVerified      Boolean       @default(false)
  verificationToken    String?
  role                 UserRole      @default(user)
  failedLoginAttempts  Int           @default(0)
  lockoutUntil         DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  lastPasswordChange   DateTime?
  sessions             Session[]

  @@map("users")
}

model Session {
  id           String           @id @default(uuid())
  userId       String
  sessionId    String           @unique
  refreshToken String
  accessToken  String
  isRevoked    Boolean          @default(false)
  expiryReason String?
  lastActiveAt DateTime         @default(now())
  createdAt    DateTime         @default(now())
  expiresAt    DateTime
  metadata     SessionMetadata?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SessionMetadata {
  id                String  @id @default(uuid())
  sessionId         String  @unique
  platform          String?
  userAgent         String?
  browser           String?
  language          String?
  ip                String?
  deviceFingerprint String?
  timezoneOffset    Int?
  session           Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_metadata")
}

enum AccountStatus {
  active
  suspended
  inactive
  pending

  @@map("account_status")
}

enum UserRole {
  user
  admin

  @@map("user_roles")
}
